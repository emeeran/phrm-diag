// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  healthRecords HealthRecord[]
  familyMembers FamilyMember[] @relation("FamilyPrimary")
  memberOf      FamilyMember[] @relation("FamilyMember")
  aiInteractions AIInteraction[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HealthRecord {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  category    String   // symptoms, medications, appointments, lab_results, etc.
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]

  @@map("health_records")
}

model Document {
  id            String   @id @default(cuid())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  url           String?
  createdAt     DateTime @default(now())
  
  // Relations
  healthRecordId String
  healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model FamilyMember {
  id          String   @id @default(cuid())
  permission  String   @default("view") // view, edit, admin
  createdAt   DateTime @default(now())
  
  // Relations
  primaryUserId String
  memberUserId  String
  primaryUser   User   @relation("FamilyPrimary", fields: [primaryUserId], references: [id], onDelete: Cascade)
  member        User   @relation("FamilyMember", fields: [memberUserId], references: [id], onDelete: Cascade)

  @@unique([primaryUserId, memberUserId])
  @@map("family_members")
}

model AIInteraction {
  id        String   @id @default(cuid())
  query     String   @db.Text
  response  String   @db.Text
  modelUsed String   // local, openai, claude, etc.
  cost      Float    @default(0)
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_interactions")
}
