// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            String    @default("USER") // USER, ADMIN
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Security features for Module 4
  mfaEnabled      Boolean   @default(false)
  mfaSecret       String?   @db.Text
  mfaBackupCodes  String?   @db.Text // JSON array of backup codes
  lastLoginAt     DateTime?
  lastLoginIp     String?
  failedLoginAttempts Int    @default(0)
  accountLocked   Boolean   @default(false)
  lockExpires     DateTime?
  
  // Consent management
  consentSettings String?   @db.Text // JSON object of consent settings
  dataRetentionPeriod String? // 1year, 3years, 7years, indefinite
  marketingConsent Boolean   @default(false)
  analyticsConsent Boolean   @default(false)
  aiProcessingConsent Boolean @default(true)
  dataProcessingVersion Int  @default(1) // Version of consent the user agreed to
  lastConsentUpdate DateTime?
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  healthRecords   HealthRecord[]
  familyMembers   FamilyMember[] @relation("FamilyPrimary")
  memberOf        FamilyMember[] @relation("FamilyMember")
  aiInteractions  AIInteraction[]
  aiUsageStats    AIUsageStats?
  healthAnalyses  HealthAnalysis[]
  predictiveInsights PredictiveInsight[]
  healthAlerts   HealthAlert[]
  familyInvitations FamilyInvitation[]
  emergencyContacts EmergencyContact[]
  notifications   Notification[]
  auditLogs       AuditLog[]
  dataExports     DataExport[]
  securityEvents  SecurityEvent[] @relation("UserSecurityEvents")
  resolvedEvents  SecurityEvent[] @relation("UserResolvedEvents")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HealthRecord {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  category    String   // symptoms, medications, appointments, lab_results, etc.
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]

  @@map("health_records")
}

model Document {
  id            String   @id @default(cuid())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  url           String?
  createdAt     DateTime @default(now())
  
  // Relations
  healthRecordId String
  healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model FamilyMember {
  id          String   @id @default(cuid())
  permission  String   @default("view") // view, edit, admin
  createdAt   DateTime @default(now())
  
  // Relations
  primaryUserId String
  memberUserId  String
  primaryUser   User   @relation("FamilyPrimary", fields: [primaryUserId], references: [id], onDelete: Cascade)
  member        User   @relation("FamilyMember", fields: [memberUserId], references: [id], onDelete: Cascade)

  @@unique([primaryUserId, memberUserId])
  @@map("family_members")
}

model AIInteraction {
  id        String   @id @default(cuid())
  query     String   @db.Text
  response  String   @db.Text
  modelUsed String   // local, openai, claude, etc.
  cost      Float    @default(0)
  promptTokens Int    @default(0)
  completionTokens Int @default(0)
  totalTokens Int     @default(0)
  complexity  Int     @default(0) // 1-10 scale
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_interactions")
}

model AIUsageStats {
  userId      String   @id
  totalCost   Float    @default(0)
  tokenCount  Int      @default(0)
  usageCount  Int      @default(0)
  lastUsedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_usage_stats")
}

model HealthAnalysis {
  id              String    @id @default(cuid())
  userId          String
  summary         String    @db.Text
  trends          Json      // Stores array of trend objects
  recordsAnalyzed Int
  aiModelUsed     String
  cost            Float     @default(0)
  analysisType    String    // 'trends', 'medication', 'risk'
  createdAt       DateTime  @default(now())
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_analyses")
}

model PredictiveInsight {
  id          String   @id @default(cuid())
  userId      String
  insightType String   // 'risk', 'recommendations', 'appointments', 'preventive'
  data        Json     // Stores the prediction data
  isRead      Boolean  @default(false)
  validUntil  DateTime // When the prediction expires
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("predictive_insights")
}

model HealthAlert {
  id          String   @id @default(cuid())
  userId      String
  alertType   String   // 'anomaly', 'refill', 'milestone', 'wellness'
  title       String
  description String   @db.Text
  priority    String   // 'low', 'medium', 'high', 'urgent'
  dismissed   Boolean  @default(false)
  data        Json     // Alert-specific data
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_alerts")
}

model FamilyInvitation {
  id          String    @id @default(cuid())
  email       String
  token       String    @unique
  permission  String    @default("view") // view, edit, admin
  expires     DateTime
  accepted    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  // Relations
  fromUserId  String
  fromUser    User      @relation(fields: [fromUserId], references: [id], onDelete: Cascade)

  @@index([email])
  @@map("family_invitations")
}

model EmergencyContact {
  id           String   @id @default(cuid())
  name         String
  relationship String
  phoneNumber  String
  email        String?
  address      String?
  notes        String?
  isActive     Boolean  @default(true)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("emergency_contacts")
}

model Notification {
  id             String   @id @default(cuid())
  title          String
  message        String
  type           String   // info, warning, alert, reminder
  isRead         Boolean  @default(false)
  userId         String
  relatedRecordId String?
  createdAt      DateTime @default(now())
  
  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

model AuditLog {
  id            String   @id @default(cuid())
  userId        String
  action        String   // login, logout, create, update, delete, download, etc.
  resourceType  String   // user, healthRecord, document, etc.
  resourceId    String?  // ID of the affected resource
  description   String?  @db.Text
  ipAddress     String?
  userAgent     String?  @db.Text
  createdAt     DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model DataExport {
  id            String   @id @default(cuid())
  userId        String
  status        String   // requested, processing, completed, failed
  fileUrl       String?  // URL to the exported data file
  expiresAt     DateTime? // When the export download link expires
  requestedAt   DateTime @default(now())
  completedAt   DateTime?
  format        String   @default("json") // json, csv, etc.
  includesHealthRecords Boolean @default(true)
  includesDocuments Boolean @default(true)
  includesAiInteractions Boolean @default(true)
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("data_exports")
}

model SecurityEvent {
  id            String   @id @default(cuid())
  eventType     String   // failed_login, suspicious_activity, brute_force_attempt, vulnerability_attempt
  userId        String?
  email         String?
  ipAddress     String?
  userAgent     String?  @db.Text
  details       String?  @db.Text
  notes         String?  @db.Text
  severity      String   @default("medium") // low, medium, high, critical
  resolved      Boolean  @default(false)
  resolvedById  String?
  resolvedAt    DateTime?
  createdAt     DateTime @default(now())
  
  // Relations
  user          User?    @relation("UserSecurityEvents", fields: [userId], references: [id], onDelete: SetNull)
  resolvedBy    User?    @relation("UserResolvedEvents", fields: [resolvedById], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([resolvedById])
  @@index([eventType])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("security_events")
}
